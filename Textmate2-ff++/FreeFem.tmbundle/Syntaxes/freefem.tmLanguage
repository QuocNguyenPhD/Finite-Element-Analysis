<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>edp</string>
		<string>txt</string>
	</array>
	<key>name</key>
	<string>freefem</string>
	<key>scopeName</key>
	<string>source.ff</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.ff++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.scope.ff++</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ff++</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.ff++</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.ff++</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.ff++</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(function)(?:\s+([a-zA-Z_.:]+[.:])?([a-zA-Z_]\w*)\s*)?(\()([^)]*)(\))</string>
			<key>name</key>
			<string>meta.function.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d+(\.\d+)?([eEdD][+-]?\d+)?i?|\.\d+([eEdD][-+]?\d+)?i?</string>
			<key>name</key>
			<string>constant.numeric.ff++</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>&quot;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ff++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&quot;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ff++</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.ff++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.ff++</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.ff++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*\/</string>
			<key>name</key>
			<string>comment.block.ff++</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.toc-list.banner.line.c</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^// =(\s*.*?)\s*=\s*$\n?</string>
			<key>name</key>
			<string>comment.line.banner.c++</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(^[ \t]+)?(?=//)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.comment.leading.ff++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ff++</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.double-slash.c++</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.ff++</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(macro)\s+             # define
        		((?&lt;id&gt;[a-zA-Z][a-zA-Z0-9]*))  # macro name
        		(?:                              # and optionally:
        		    (\()                         # an open parenthesis
        		        (
        		            \s* \g&lt;id&gt; \s*       # first argument
        		            ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
        		            (?:\.\.\.)?          # varargs ellipsis?
        		        )
        		    (\))                         # a close parenthesis
        		)?
        	</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.ff++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.ff++</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.ff++</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.preprocessor.ff++</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.ff++</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.ff++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>//</string>
			<key>name</key>
			<string>meta.preprocessor.macro.ff++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|else|for|if|return|while|func|border|varf|solve|problem)\b</string>
			<key>name</key>
			<string>keyword.control.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(false|true|pi|mpirank|mpi|mpisize|region|lenEdge|hTriangle|hTriangle|nuEdge|nTonEdge|area|volume|cin|cout))\b</string>
			<key>name</key>
			<string>constant.language.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(verbosity|x|y|z|label|N|P)\b</string>
			<key>name</key>
			<string>variable.language.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(assert|load)\b(?=\s*(?:[({&quot;&apos;]|\[\[))</string>
			<key>name</key>
			<string>support.function.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|pow|rad|random|randomseed|sinh?|sqrt|tanh?)\b(?=\s*(?:[({&quot;&apos;]|\[\[))</string>
			<key>name</key>
			<string>support.function.library.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(and|or|not)\b</string>
			<key>name</key>
			<string>keyword.operator.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(int|real|complex|bool|string|mesh3|fespace|mesh|matrix)\b</string>
			<key>name</key>
			<string>storage.type.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([A-Za-z][A-Za-z0-9]*)\b(?=\s*(?:[({&quot;&apos;]|\[\[))</string>
			<key>name</key>
			<string>support.function.any-method.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=[^.]\.|:)\b([A-Za-z][A-Za-z0-9]*)</string>
			<key>name</key>
			<string>variable.other.ff++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|-|%|#|\*|\/|\^|\||\&amp;|_|==?|&lt;=?|&gt;=?|(?&lt;!\.)\.{2}(?!\.)</string>
			<key>name</key>
			<string>keyword.operator.ff++</string>
		</dict>
	</array>
	<key>uuid</key>
	<string>14374AA3-A329-4623-8DFA-1ACC2CE222B9</string>
</dict>
</plist>
